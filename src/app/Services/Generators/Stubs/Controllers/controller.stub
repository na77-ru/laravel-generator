<?php

{{namespace}}

{{use}}

/**
 * Class {{ControllerClassName}}
 * @property {{RepositoryClassName}} ${{thisRepoVar}}
 */
class {{ControllerClassName}} extends {{BaseControllerClassName}}
{

{{repositoryVars}}


    public function __construct()
    {
        parent::__construct();

{{writeRepositoryVarsInConstructor}}
    }

    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @throws \Exception
     */
    public function index()
    {
        $paginator = $this->{{thisRepoVar}}->getAllWithPaginate(config('admin.perPage'));

        return view('{{views_directory}}.index', compact('paginator'));
    }

    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @throws \Exception
     */
    public function create()
    {
        $item = $this->{{thisRepoVar}}->makeModel();

{{ $lists of belongsToMany for create, edit from Repositories }}

        return view('{{views_directory}}.create',
            {{ compact(...) }});
    }

    /**
     * @param {{ModelClassStoreRequest}} $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store({{ModelClassStoreRequest}} $request)
    {
        $data = $request->input();
        $item = $this->{{thisRepoVar}}->create($data);

        if ($item) {
            return redirect()
                ->route("{{views_routes}}.index")
                ->with([
                    'messages' => __("Запись  $item->title  успешно сохранена"),
                    'alert-type' => 'alert-success',
                ]);
        } else {
            return back()
                ->withErrors(['msg' => "Ошибка сохранения  записи $item->title ."])
                ->withInput();
        }
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        dd(__METHOD__);
    }

    /**
     * @param $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @throws \Exception
     */
    public function edit($id)
    {
        $item = $this->{{thisRepoVar}}->getEdit($id);
{{ $lists of belongsToMany for create, edit from Repositories }}
        return view('{{views_directory}}.edit',
            {{ compact(...) }});
    }

    /**
     * @param {{ModelClassStoreRequest}} $request
     * @param $id
     * @return RedirectResponse
     */
    public function update({{ModelClassStoreRequest}} $request, $id)
    {
        /**@var {{ModelNameSpace}}\{{ModelClass}} $data */
        $data = $request->input();

        $item = $this->{{thisRepoVar}}->find($id);

        if (empty($item)) {
            return back()
                ->withErrors(['msg' => "Запись id = [{$id}] не найдена"])
                ->withInput();
        }

        if ($this->{{thisRepoVar}}->update($data, $id)) {
            return redirect()
                ->route("{{views_routes}}.index")
                ->with([
                    'messages' => app()->msg->getMsg(),//in BlogAdminObserver app()->msg->setMsg()
                    'alert-type' => app()->msg->getAT(),
                ]);
        } else {
            return back()
                ->withErrors(['msg' => "Ошибка сохранения записи с id = [{$id}]."])
                ->withInput();
        }

    }

    /**
     * @param $id
     * @return RedirectResponse
     * @throws \Exception
     */
    public function destroy($id)
    {
        $result = $this->{{thisRepoVar}}->delete($id);
        if ($result) {
            return redirect()
                ->route("{{views_routes}}.index")
                ->with([
                    'messages' => 'Запись с <b>id - ' . $id . '</b> успешно удалена',
                    'alert-type' => 'alert-success',
                ]);
        } else {
            return back()
                ->withErrors(['msg' => "Ошибка удаления записи с id = [{$id}]."])
                ->withInput();
        }
    }

    public function restore($id = null)
    {
        $result = $this->{{thisRepoVar}}->restore($id);

        if ($result) {
            return redirect()
                ->route("{{views_routes}}.index")
                ->with([
                    'messages' => app()->msg->getMsg(),//in BlogPostRepository app()->msg->setMsg()
                    'alert-type' => app()->msg->getAT(),
                ]);
        } else {
            return back()
                ->withErrors(['msg' => "Ошибка востановления категорий."])
                ->withInput();
        }
    }
}
